/**
 * Create a `lowlight` instance.
 *
 * @param {Readonly<Record<string, LanguageFn>> | null | undefined} [grammars]
 *   Grammars to add (optional).
 * @returns
 *   Lowlight.
 */
export function createLowlight(grammars?: Readonly<Record<string, LanguageFn>> | null | undefined): {
    highlight: (language: string, value: string, options?: Readonly<Options> | null | undefined) => Root;
    highlightAuto: (value: string, options?: Readonly<AutoOptions> | null | undefined) => Root;
    listLanguages: () => Array<string>;
    registerAlias: {
        /**
         * Register aliases for already registered languages.
         *
         * @overload
         * @param {Readonly<Record<string, ReadonlyArray<string> | string>>} aliaseMap
         * @returns {undefined}
         *
         * @overload
         * @param {string} language
         * @param {ReadonlyArray<string> | string} aliases
         * @returns {undefined}
         *
         * @param {Readonly<Record<string, ReadonlyArray<string> | string>> | string} language
         *   Programming language name or a map of `language`s to `alias`es or `list`s
         * @param {ReadonlyArray<string> | string | undefined} [alias]
         *   New aliases for the programming language.
         * @returns {undefined}
         *   Nothing.
         */
        (aliaseMap: Readonly<Record<string, ReadonlyArray<string> | string>>): undefined;
        /**
         * Register aliases for already registered languages.
         *
         * @overload
         * @param {Readonly<Record<string, ReadonlyArray<string> | string>>} aliaseMap
         * @returns {undefined}
         *
         * @overload
         * @param {string} language
         * @param {ReadonlyArray<string> | string} aliases
         * @returns {undefined}
         *
         * @param {Readonly<Record<string, ReadonlyArray<string> | string>> | string} language
         *   Programming language name or a map of `language`s to `alias`es or `list`s
         * @param {ReadonlyArray<string> | string | undefined} [alias]
         *   New aliases for the programming language.
         * @returns {undefined}
         *   Nothing.
         */
        (language: string, aliases: ReadonlyArray<string> | string): undefined;
    };
    registerLanguage: {
        /**
         * Register languages.
         *
         * @overload
         * @param {Readonly<Record<string, LanguageFn>>} languageMap
         * @returns {undefined}
         *
         * @overload
         * @param {string} name
         * @param {LanguageFn} language
         * @returns {undefined}
         *
         * @param {Readonly<Record<string, LanguageFn>> | string} languageMapOrName
         *   Programming language name or a map of names to language functions.
         * @param {LanguageFn | undefined} [languageFn]
         *   Language function, if with name.
         * @returns {undefined}
         *   Nothing.
         */
        (languageMap: Readonly<Record<string, LanguageFn>>): undefined;
        /**
         * Register languages.
         *
         * @overload
         * @param {Readonly<Record<string, LanguageFn>>} languageMap
         * @returns {undefined}
         *
         * @overload
         * @param {string} name
         * @param {LanguageFn} language
         * @returns {undefined}
         *
         * @param {Readonly<Record<string, LanguageFn>> | string} languageMapOrName
         *   Programming language name or a map of names to language functions.
         * @param {LanguageFn | undefined} [languageFn]
         *   Language function, if with name.
         * @returns {undefined}
         *   Nothing.
         */
        (name: string, language: LanguageFn): undefined;
    };
    registered: (aliasOrLanguage: string) => boolean;
};
export type Element = import('hast').Element;
export type ElementContent = import('hast').ElementContent;
export type Root = import('hast').Root;
export type RootData = import('hast').RootData;
export type Emitter = import('highlight.js').Emitter;
export type HljsOptions = import('highlight.js').HLJSOptions;
export type HighlightResult = import('highlight.js').HighlightResult;
export type LanguageFn = import('highlight.js').LanguageFn;
/**
 * Extra fields.
 */
export type ExtraOptions = {
    /**
     * List of allowed languages (default: all registered languages).
     */
    subset?: ReadonlyArray<string> | null | undefined;
};
/**
 * Configuration for `highlight`.
 */
export type Options = {
    /**
     * Class prefix (default: `'hljs-'`).
     */
    prefix?: string | null | undefined;
};
/**
 * Configuration for `highlightAuto`.
 */
export type AutoOptions = Options & ExtraOptions;
